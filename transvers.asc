//---------------------------------------------------------------------------------
[[transvers]]
[{intro}]
== Les aspects transversaux
//---------------------------------------------------------------------------------

ifndef::book[]

ifdef::slides[== Aspects transversaux]

.Aspects transversaux
[cols="h,4*^",options="header",width=100]
|======================
|					| {Requirements} 	| {Structure}	| {Behavior} 	| [red]#{Crosscutting}# {here}
| {organisation}	|					|        		|				|
| {analysis}		|					|        		|				|
| {design}			|					|        		|				|
| {implementation}	|					|        		|				|
|======================
endif::book[]

ifdef::slides[]
:leveloffset: -1
endif::slides[]

[{topic}]
=== Fondements

On abordera ici les aspects transversaux comme :

- la traçabilité des exigences indexterm:[Traçabilité]
- les mécanismes d'allocation
- le diagramme paramétrique

[{topic}]
=== Traçabilité des exigences

Nous avons vu déjà un certain nombre de mécanismes {sysml} qui permettent de tracer les exigences.
Nous les regroupons ici dans une matrice spécifique (qui se lit dans le sens des relations, par exemple un élément de structure comme un bloc `+<<satisfy>>+` une exigence).

.Traçabilité
ifdef::book[[cols="h,3*",options="header"]]
ifndef::book[[cols="h,3*",options="header",width="50%"]]
|======================
|					| {Requirements} 							| {Structure}	| {Behavior}
| {Requirements}	| `+<<deriveRqt>>+`, `+<<refine>>+`, `+<<copy>>+` |    			|
| {Structure}		| `+<<allocate>>+`, `+<<satisfy>>+`				| 				| `+<<allocate>>+`
| {Behavior}		| `+<<refine>>+`								|				|
|======================

Comme indiqué dans le tableau ci-dessus, en général, le lien de raffinement est utilisé entre une exigence et un élément comportemental (état, activité, `{uc}`, etc.) tandis que l'allocation concerne principalement les éléments de structures.

#XXX Mettre un exemple avec tous ces liens. XXX#

[{topic}]
=== Mécanismes d'allocation

Un mécanisme nouveau en {sysml} et important pour {lis} est le mécanisme d'*allocation*. Il permet de
préciser quel élément conceptuel (comme un comportement ou une activité) est alloué sur quel élément physique.

Il est possible d'exprimer cette allocation de plusieurs manières.

Parler du `+<<AllocatedTo>>+`, compartiments des blocs et autres annotations.
Parler des zones d'allocation dans les machines à états où les diagrammes d'activités par exemple.
Parler des `+<<allocate>>+`.

[{topic}]
=== Diagramme paramétrique

C'est une forme particulière de _Internal Block Definition_ (cf. <<param>>). On y retrouve les contraintes, déjà vues
 (cf. <<contraintes>>), mais cette fois-ci on a la représentation graphique des liens entre les données.

ifndef::slides[.Exemple de diagramme paramétrique]
ifdef::book[image::param.png[scale=50]]
ifndef::book[image::param.png[width="90%"]]

ifdef::slides[=== Diagramme paramétrique (suite)]

Il est regrettable que ce diagramme soit le moins utilisé (cf. <<enquete>>).

[NOTE]
====
Certaines approchent (cf. <<MeDICIS>>) utilisent des feuilles excel pour traduire les diagrammes paramétriques et contrôler l'impact des changements de valeurs de tel ou tel paramètre.
====

[{topic}]
=== {resume}
En résumé l'expression du comportement du système en {sysml} est très similaire à ce qui est fait dans {uml}. On retrouve néanmoins le renforcement des liens entre éléments de modèles par les dépendances précises et les allocations. Un autre élément de renforcement entre éléments de modèles concerne le fait qu'un diagramme comportemental (comme une machine à état) est attachée à un élément bien précis (par exemple un bloc). Ces liens apparaissent entre blocs et machines à état, entre cas d'utilisation et diagrammes de séquence ou d'activité, etc.

[{topic}]
=== {revisions}

ifdef::slides[image::icons/tuxteacher.png[width=30%]]

ifndef::slides[]
.Questions
[NOTE,icon=tuxteacher.png]
====
endif::slides[]
Quelles sont les différences entre `+<<satisfy>>+` et `+<<allocate>>+` ?

Pourquoi est-il important de relier un _use case_ à au moins un _requirement_ ?

L'inverse est-il aussi important ?
ifndef::slides[]
====
endif::slides[]

ifdef::slides[=== {revisions}]

ifdef::correction[]

Éléments de réponses :

. Quelles sont les différences entre `+<<satisfy>>+` et `+<<allocate>>+` ?
La satisfaction concerne une propriété (d'une solution vis à vis d'un problème) quand l'allocation permet de rajouter un information sur qui fait quoi.
. Pourquoi est-il important de relier un _use case_ à au moins un _requirement_ ?
Sinon on peut se demander s'il s'agit vraiment d'une utilisation du système qui nous concerne (une exigence a-t'elle été oubliée?).
. L'inverse est-il aussi important ?
Encore plus je dirais, au sens où une exigence n'est couverte par aucune utilisation du système (cela peut arriver lors d'une exigence non satisfiable!)

endif::correction[]

:leveloffset: 0
